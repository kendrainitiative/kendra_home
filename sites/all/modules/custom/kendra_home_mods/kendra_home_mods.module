<?php

/**
 * Implements hook_form_alter().
 */
function kendra_home_mods_form_user_login_alter(&$form, &$form_state) {
  $form['actions']['password_link'] = array(
    '#markup' => l(t('Forgot your password?'), 'user/password'),
    '#weight' => 999,
  );
}



/**
 * Implements hook_field_widget_form_alter().
 */
function kendra_home_mods_field_widget_form_alter(&$element, &$form_state, $context) {
  // Alter the widget from safeword
  if ($context['field']['type'] == 'safeword') {
    // Check we are on the field_user_name.
    if ($element['#field_name'] == 'field_user_name') {
      // Check we are on the registration form
      if ($form_state['build_info']['form_id'] == 'user_register_form') {
        if (isset($element['machine'])) {
          // Hide the machine name.
          $element['machine']['#disabled']  = TRUE;
          // Hide the label.
          $element['machine']['#machine_name']['label'] ='';
          // Add validtion.
          $element['#element_validate'] = array('kendra_home_mods_user_name_widget_form_validate');
        }
      }
    }
  }
}

/**
 * Element validation function for the full name field.
 */
function kendra_home_mods_user_name_widget_form_validate(&$element, &$form_state) {
  // Get the trimmed name.
  $name = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $name = trim($name['human']);
  // If name is empty.
  if (empty($name)) {
    // No need for action as will be handled by the requiered field.
    return;
  }
  else {
    // count the number of parts the name has.
    $parts = explode(' ', $name);
    // If only one.
    if (count($parts) == 1) {
      // create a form error.
      form_error($element['human'], t('You need to provide a full name: first name + last name and optionally a middle name.'));
    }
  }
}


function kendra_home_mods_pathauto_alias_alter(&$alias, array &$context) {
  //dpm($alias);
  //dpm($context);

  if ($context['module'] == 'user' &&
    !empty($context['data']['user']->field_user_name['und'][0]['machine'])) {
    $alias = 'users/' . $context['data']['user']->field_user_name['und'][0]['machine'];
  }
}




/**
 * Implementation of hook_field_user_import_supported_alter().
 */
function kendra_home_mods_field_user_import_supported_alter(&$supported) {
 $supported['safeword'] = array(
   //'validate' => 'safeword_field_validate',
   'validate' => 'field_user_import_default_field_validator',
   'save' => 'kendra_home_mods_user_import_field_safeword_processor',
 );
}


/**
 * Set the safeword human.
 */
function kendra_home_mods_user_import_field_safeword_processor($user_fields, $field_name, $values) {
  $field = $user_fields->$field_name;

  for ($i = 0; $i < count($values); $i++) {
    if (!empty($values[$i])) {
      $field[LANGUAGE_NONE][$i]['human'] = $values[$i];
      $field[LANGUAGE_NONE][$i]['machine'] = _clean_up_string($values[$i], TRUE, 255, TRUE);
    }
  }

  return $field;
}

/**
 * Clean up the description string
 */
function _clean_up_string($srcstring, $truncate = TRUE, $length = 255, $url_safe = FALSE) {
  // encode chars
  $plainstr = check_plain($srcstring);
  // remove line feeds and tabs
  $simplestr = preg_replace("/\r\n+|\r+|\n+|\t+/i", " ", $plainstr);
  // truncate safetly
  $nochars = mb_convert_encoding($simplestr, 'UTF-8', 'UTF-8');
  $nomorechars = _cleanString($nochars, $url_safe);
  if ($truncate) {
     $cleanstring = ltrim(truncate_utf8($nomorechars, $length, TRUE, FALSE));
  } else {
     $cleanstring = $nomorechars;
  }
   return $cleanstring;
}

/*
 * Clean string function
 * ref: http://www.unexpectedit.com/php/php-clean-string-of-utf8-chars-convert-to-similar-ascii-char
 */
function _cleanString($text, $url_safe = FALSE) {
    // 1) convert á ô => a o
    $text = preg_replace("/[áàâãªä]/u","a",$text);
    $text = preg_replace("/[ÁÀÂÃÄ]/u","A",$text);
    $text = preg_replace("/[ÍÌÎÏ]/u","I",$text);
    $text = preg_replace("/[íìîï]/u","i",$text);
    $text = preg_replace("/[éèêë]/u","e",$text);
    $text = preg_replace("/[ÉÈÊË]/u","E",$text);
    $text = preg_replace("/[óòôõºö]/u","o",$text);
    $text = preg_replace("/[ÓÒÔÕÖ]/u","O",$text);
    $text = preg_replace("/[úùûü]/u","u",$text);
    $text = preg_replace("/[ÚÙÛÜ]/u","U",$text);
    $text = preg_replace("/[’‘‹›‚]/u","'",$text);
    $text = preg_replace("/[“”«»„]/u",'"',$text);
    $text = str_replace("–","-",$text);
    $text = str_replace(" "," ",$text);
    $text = str_replace("ç","c",$text);
    $text = str_replace("Ç","C",$text);
    $text = str_replace("ñ","n",$text);
    $text = str_replace("Ñ","N",$text);

    //2) Translation CP1252. &ndash; => -
    $trans = get_html_translation_table(HTML_ENTITIES);
    $trans[chr(130)] = '&sbquo;';    // Single Low-9 Quotation Mark
    $trans[chr(131)] = '&fnof;';    // Latin Small Letter F With Hook
    $trans[chr(132)] = '&bdquo;';    // Double Low-9 Quotation Mark
    $trans[chr(133)] = '&hellip;';    // Horizontal Ellipsis
    $trans[chr(134)] = '&dagger;';    // Dagger
    $trans[chr(135)] = '&Dagger;';    // Double Dagger
    $trans[chr(136)] = '&circ;';    // Modifier Letter Circumflex Accent
    $trans[chr(137)] = '&permil;';    // Per Mille Sign
    $trans[chr(138)] = '&Scaron;';    // Latin Capital Letter S With Caron
    $trans[chr(139)] = '&lsaquo;';    // Single Left-Pointing Angle Quotation Mark
    $trans[chr(140)] = '&OElig;';    // Latin Capital Ligature OE
    $trans[chr(145)] = '&lsquo;';    // Left Single Quotation Mark
    $trans[chr(146)] = '&rsquo;';    // Right Single Quotation Mark
    $trans[chr(147)] = '&ldquo;';    // Left Double Quotation Mark
    $trans[chr(148)] = '&rdquo;';    // Right Double Quotation Mark
    $trans[chr(149)] = '&bull;';    // Bullet
    $trans[chr(150)] = '&ndash;';    // En Dash
    $trans[chr(151)] = '&mdash;';    // Em Dash
    $trans[chr(152)] = '&tilde;';    // Small Tilde
    $trans[chr(153)] = '&trade;';    // Trade Mark Sign
    $trans[chr(154)] = '&scaron;';    // Latin Small Letter S With Caron
    $trans[chr(155)] = '&rsaquo;';    // Single Right-Pointing Angle Quotation Mark
    $trans[chr(156)] = '&oelig;';    // Latin Small Ligature OE
    $trans[chr(159)] = '&Yuml;';    // Latin Capital Letter Y With Diaeresis
    $trans['euro'] = '&euro;';    // euro currency symbol
    ksort($trans);

    foreach ($trans as $k => $v) {
        $text = str_replace($v, $k, $text);
    }

    // 3) remove <p>, <br/> ...
    $text = strip_tags($text);

    // 4) &amp; => & &quot; => '
    $text = html_entity_decode($text);

    // 5) remove Windows-1252 symbols like "TradeMark", "Euro"...
    $text = preg_replace('/[^(\x20-\x7F)]*/','', $text);

    $targets=array('\r\n','\n','\r','\t');
    $results=array(" "," "," ","");
    $text = str_replace($targets,$results,$text);
    // If this is to be used as a url.
    if ($url_safe) {
      $text = strtolower($text);
      $text = str_replace(" ","-",$text);
    }

    //XML compatible
    /*
    $text = str_replace("&", "and", $text);
    $text = str_replace("<", ".", $text);
    $text = str_replace(">", ".", $text);
    $text = str_replace("\\", "-", $text);
    $text = str_replace("/", "-", $text);
    */

    return ($text);
}

/**
 * Implements hook_menu().
 */
function kendra_home_mods_menu() {

  $items = array();
//  // Test mailchimp functions
//  $items['admin/mailchimp/subscribe'] = array(
//    'title' => 'Subscribe to mailchimp',
//    'description' => 'Subscribe the user_id to mailchimp',
//    'page callback' => 'kendra_home_mods_mailchimp_subscribe_url',
//    'access arguments' => array('administer users'),
//    'type' => MENU_CALLBACK,
//  );
//  $items['admin/mailchimp/unsubscribe'] = array(
//    'title' => 'Unsubscribe to mailchimp',
//    'description' => 'Unsubscribe the user_id to mailchimp',
//    'page callback' => 'kendra_home_mods_mailchimp_unsubscribe_url',
//    'access arguments' => array('administer users'),
//    'type' => MENU_CALLBACK,
//  );
//  // This is a one off use - so commant out once finished
//  $items['admin/mailchimp/subscribe_all_active_users'] = array(
//    'title' => 'Subscribe all active users to mailchimp',
//    'description' => 'Unsubscribe the user_id to mailchimp',
//    'page callback' => 'kendra_home_mods_mailchimp_subscribe_all',
//    'access arguments' => array('administer users'),
//    'type' => MENU_CALLBACK,
//  );

  return $items;
}

/**
 * Implements hook_action_info().
 */
function kendra_home_mods_action_info() {

  return array(
    'kendra_home_mods_subscribe_mailchimp' => array(
      'label' => t('Subscribe to mailchimp'),
      'type' => 'user',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'kendra_home_mods_unsubscribe_mailchimp_action' => array(
      'label' => t('Unsubscribe from mailchimp'),
      'type' => 'user',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'kendra_home_mods_resubscribe_mailchimp_action' => array(
      'label' => t('Resubscribe to mailchimp'),
      'type' => 'user',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action function.
 */
function kendra_home_mods_subscribe_mailchimp(&$user, $context = array()) {
  $uid = $user->uid;
  kendra_home_mods_mailchimp_subscribe($uid);
}


function kendra_home_mods_unsubscribe_mailchimp_action(&$user, $context = array()) {
  $uid = $user->uid;
  kendra_home_mods_mailchimp_unsubscribe($uid);
}

function kendra_home_mods_resubscribe_mailchimp_action(&$user, $context = array()) {
  $uid = $user->uid;
  kendra_home_mods_mailchimp_unsubscribe($uid);
  kendra_home_mods_mailchimp_subscribe($uid);
}


/**
 * Test mailchimp function for subscribe using a url call
 */
function kendra_home_mods_mailchimp_subscribe_url() {
  $list_id = arg(3);
  $uid = arg(4);
  if (!isset($list_id)) {
    print 'please provide a user id';
  }
  else {
    print 'list_id = ' . $list_id;
    print ', Subsribe uid = ' . $uid;
    //kendra_home_mods_mailchimp_subscribe($list_id, $uid);
    kendra_home_mods_mailchimp_subscribe($uid);
    //print $mail;
    //print_r($name);
    //print_r($target_user);
  }
}

/**
* Test mailchimp function for unsubscribe using a url call
 */
function kendra_home_mods_mailchimp_unsubscribe_url() {
  $list_id = arg(3);
  $uid = arg(4);
  if (!isset($list_id)) {
    print 'please provide a user id';
  }
  else {
    print 'list_id = ' . $list_id;
    print ', Unsubsribe uid = ' . $uid;
    //kendra_home_mods_mailchimp_unsubscribe($list_id, $uid);
    kendra_home_mods_mailchimp_unsubscribe($uid);
  }
}

/**
 * Temp Function to run a once off mailchimp subscribe for all active users.
 */
function kendra_home_mods_mailchimp_subscribe_all() {
  // Load all users
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user');
  $query->propertyCondition('status', 1);
  $entities = $query->execute();
  if (!empty($entities)) {
    // Cycle all users.
    foreach ($entities['user'] as $uid => $obj) {
      if ($uid > 0) {
        // Subscribe user.
        kendra_home_mods_mailchimp_subscribe($uid);
        print 'uid ' . $uid . ' registered for mailchimp</br>';
        watchdog('kendra_home_mods', 'subscribed uid !uid', array('!uid' => $uid), WATCHDOG_DEBUG);
      }
    }
  }
  watchdog('kendra_home_mods', 'subscribed all users', array(), WATCHDOG_DEBUG);
}
/**
 * Subscribe a user to mailchimp.
 *
 * The $list_id is available from the mailchimp:
 *  list->Settings->List name and Campaign defaults
 */
function kendra_home_mods_mailchimp_subscribe($uid) {
//function kendra_home_mods_mailchimp_subscribe($list_id, $uid) {
  $target_user = user_load($uid);

//  // Debug code - only register blue-bag users.
//  if (strpos($target_user->mail, 'blue-bag')) {
//    // Using the field.
//    $target_user->field_mc_subscribe['und'][0] = array('subscribe' => 1);
//    user_save($target_user);
//    print $target_user->mail . ' Imported !!!!!!!!!!!!!!!!!!!!!!<br/>';
//  }
//  return;

  // Using the field.
  $target_user->field_mc_subscribe['und'][0] = array('subscribe' => 1);
  user_save($target_user);
  return;

  // Old way using the function
  $email = $target_user_ep->mail->value();
  $name = $target_user_ep->field_user_name->value();
  $name = $name['human'];

  $merge_vars = array();
  $merge_vars['advanced'] = 0;
  $merge_vars['LNAME'] = '';
  $merge_vars['FNAME'] = $name;
  $merge_vars['EMAIL'] = $email;

  // Settings.
  $double_optin = FALSE;
  $confirm = FALSE;
  $format = 'html';
  $update_existing = TRUE;
  $replace_interests = TRUE;

  $mailchimp_result =  mailchimp_subscribe($list_id, $email, $merge_vars, $double_optin, $confirm, $format = 'html', $update_existing, $replace_interests);
  //print_r($mailchimp_result);
  //drupal_set_message(print_r($mailchimp_result, TRUE));
}

/**
 * Unsubscribe a user to mailchimp.
 *
 * The $list_id is available from the mailchimp:
 *  list->Settings->List name and Campaign defaults
 */
function kendra_home_mods_mailchimp_unsubscribe($uid) {
  $target_user = user_load($uid);
  // Using the field.
  $target_user->field_mc_subscribe['und'][0] = array('subscribe' => 0);
  user_save($target_user);
  return;

  // Old way using the function
  $target_user_ep = entity_metadata_wrapper('user', $target_user);
  $email = $target_user_ep->mail->value();

  $mailchimp_result =  mailchimp_unsubscribe($list_id, $email, TRUE, FALSE, FALSE);
  print_r($mailchimp_result);
  //drupal_set_message(print_r($mailchimp_result, TRUE));
}