<?php

/**
 * @file
 * Force users to fill any required profile fields at login.
 */

/**
 * Implements hook_menu().
 */
function pfff_menu() {
  $items = array();
  $items['user/fill_fields/%/%'] = array(
    'title' => 'Complete your profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pfff_login', 2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/people/pfff'] = array(
    'title' => 'Profile fields force filling',
    'description' => 'Configure user profile fields required at login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pfff_admin_settings'),
    'access callback' => TRUE, 
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/**
 * Implements hook_theme().
 */
function pfff_theme()
{
	return array
	(
		'pfff_admin_settings' => array
		(
			'render element' => 'form'
		),
	);
}
/**
 * Implements hook_user_login().
 */
function pfff_user_login(&$edit, $account) {
  global $user;
  global $language;

  if ($user->uid == 1) {
    return;
  }

	$uid = $user->uid;

  // return if no action is required.
  $fields = pfff_fields($uid);
	if (empty($fields)) {
	  return;
	}

	// Destroy the current session.
	module_invoke_all('user_logout', $user);
	session_destroy();

  // We have to use $GLOBALS to unset a global variable.
  $user = drupal_anonymous_user();


  //TODO: check this!!
  $query = NULL;
  // Deal with destination from password reset one time login link.
  if (arg(0) == 'user' && arg(1) == 'reset') {
    $query = array('destination' => "user/$uid/edit");
  }
  
  if (!empty($_REQUEST['destination'])) {
    $query = array('destination' => $_REQUEST['destination']);
  }

  unset($_GET['destination']);

  $result = db_select('users', 'u')
    ->fields('u')
    ->condition('uid', $uid)
    ->range(0, 1)
    ->execute()
    ->fetchAllAssoc('uid');
  $signatory = array_pop($result);

  drupal_goto('user/fill_fields/' . $signatory->uid . '/' . md5($signatory->name . $signatory->pass . $signatory->login), array('query' => $query));
}
/***
 * Helper functions that return profile fields.
 */
function pfff_get_fields() {
  // #1 check if any required profile field still need to be filled
  $fields = field_info_instances('user', 'user');
  return $fields;
}
/***
 * Helper functions that return profile fields that need to be reviewed / filled.
 */
function pfff_fields($uid) {
  // #1 check if any required profile field still need to be filled
  $account = user_load($uid);
  $fields = field_info_instances('user', 'user');
  $req_fields = array();
  foreach ($fields as $field_name => $instance) {
    if ($instance['required'] && empty($account->$field_name)) {
      $req_fields[] = $field_name;
    }
  }
  return $req_fields;
}
/**
 * Administration form.
 */
function pfff_admin_settings($form, $form_state) {
  $fields = pfff_get_fields(); // dsm($fields);
  $settings = variable_get('pfff_field_review_request',array());
  $form['intro']['#markup'] = t('<p>Enable require review to display selected fields at next user login. They will be displayed only once to each user. Check "renew" if you want to show them again.<br>When adding a new field enable require review to show it to existing users. No need to enable required fields, as they will always be displayed automagically at next login if empty.</p>');
  foreach ($fields as $field_name => $field) {
    $form[$field_name] = array(
      '#title' => $field_name,
      '#type' => 'item',
      '#tree' => TRUE,
      '#pfff_is_field' => TRUE,
     );
    $form[$field_name]['show'] = array(
      '#type' => 'checkbox',
      '#default_value' => $field['settings']['user_register_form'],
      '#disabled' => TRUE,
    );
    $form[$field_name]['required'] = array(
      '#type' => 'checkbox',
      '#default_value' => $field['required'],
      '#disabled' => TRUE,
    );
    $form[$field_name]['edit'] = array(
      '#markup' => l('edit','admin/config/people/accounts/fields/' . $field_name, array('query' => array('destination' => 'admin/config/people/pfff'))),
      '#type' => 'item',
    );
    $form[$field_name]['review']['enable'] = array(
      '#type' => 'checkbox',
      '#default_value' => (isset($settings[$field_name]) ? TRUE : FALSE),
     );
    $form[$field_name]['review']['since'] = array(
      '#type' => 'item',
      '#markup' => (isset($settings[$field_name]) ? format_date($settings[$field_name]) : ''),
      '#size' => 16,
      '#maxlength' => 16,
     );
    if (isset($settings[$field_name])) {
      $form[$field_name]['review']['renew'] = array(
        '#type' => 'checkbox',
        '#title' => t('renew'),
       );
    }
     $form['#attached']['css'] = array(drupal_get_path('module', 'pfff') . '/pfff.css');
  }
  $form['#theme'] = 'pfff_admin_settings';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}
/**
 * Administration form submit function.
 */
function pfff_admin_settings_submit($form, &$form_state) {
  $fields = $form_state['values'];
  $values = array();
  $settings = variable_get('pfff_field_review_request', array());
  foreach($fields as $name => $field) {
    if (is_array($field) && isset($field['review']['enable']) && $field['review']['enable']) {
      if (!isset($settings[$name]) || (isset($settings[$name]) && $field['review']['renew'])) {
        $values[$name] = time();
      }
      else {
        $values[$name] = $settings[$name];
      }
    }
  }
  variable_set('pfff_field_review_request',$values);
}
/**
 * Administration form theme function.
 */
function theme_pfff_admin_settings($variables) {
	// Isolate the form definition form the $variables array
	$form = $variables['form'];
	$empty = TRUE;
	$output = drupal_render($form['intro']);
	$header = array();
	$rows[] = array(
	   array('data' => t('Field name'), 'rowspan' => 2, 'header' => 1, 'class' => 'main-title'),
	   array('data' => t('Behaviour when user registers'), 'colspan' => 3, 'header' => 1, 'class' => 'main-title'),
	   array('data' => t('Require review'), 'colspan' => 2, 'header' => 1, 'class' => 'main-title'),
	   );
	$rows[] = array(
	   array('data' => t('Display'), 'header' => 1),
	   array('data' => t('Required'), 'header' => 1),
	   array('data' => '', 'header' => 1),
	   array('data' => t('Enabled'), 'header' => 1),
	   array('data' => t('Show to users the first time they log in since'), 'header' => 1),
	   );
	foreach(element_children($form) as $field) {
	  if (isset($form[$field]['#pfff_is_field']) && $form[$field]['#pfff_is_field']) {
	    $empty = FALSE;
	    $row = array(
	      drupal_render($form[$field]['show']),
	      drupal_render($form[$field]['required']),
	      array('data' => drupal_render($form[$field]['edit']), 'class' => 'edit-field col-border'),
	      drupal_render($form[$field]['review']['enable']),
	      array('data' => '<div>' . drupal_render($form[$field]['review']['since']) . (isset($form[$field]['review']['renew']) ? drupal_render($form[$field]['review']['renew']) : '') . '</div>', 'class' => 'edit-field'),
	    );
	    array_unshift($row, array('data' => drupal_render($form[$field]), 'class' => 'col-border'));
	    $rows[] = $row;
	  }
	}
  $output .= theme('table', array('header' => $header, 'rows' => $rows,));
  if ($empty) $output .= t('<div>User profile has no fields.</div><br>');
  $output .= drupal_render_children($form);
	return $output;
}
/**
 * Require registered to fill missing fields.
 */
function pfff_login($form, $form_state, $uid, $id_hash = NULL) {
  $form['helptext'] = array(
    '#markup' => t('Please fill this form to complete your registration.'),
  );
  // get fields to be filled/reviewd for this account
  $fields = pfff_fields($uid);
  $register_form = user_register_form($form, $form_state);
  foreach ($fields as $index => $field_name) {
    $form[$field_name] = $register_form[$field_name];
  }
  // TODO: need to get saved values for non empty fields that just need 
  // to be reviewed
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );
  $form['id_hash'] = array(
    '#type' => 'value',
    '#value' => $id_hash,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#weight' => 1000,
    '#value' => t('Submit'),
  );
  return $form;
}

function pfff_login_validate($form, &$form_state) {
  $result = db_select('users', 'u')
    ->fields('u')
    ->condition('uid', $form_state['values']['uid'])
    ->range(0, 1)
    ->execute()
    ->fetchAllAssoc('uid');

  $account = array_pop($result);
  $id_hash = md5($account->name . $account->pass . $account->login);

  if ($id_hash != $form_state['values']['id_hash']) {
    form_set_error('pfff_validate', t('User ID cannot be identified.'));
    drupal_goto();
  }
}

function pfff_login_submit($form, &$form_state) {
  global $user;
  $user = user_load((int)$form_state['values']['uid']);
  $fields_value = array();
  $fields = pfff_fields((int)$form_state['values']['uid']); 
  foreach ($fields as $index => $field_name) {
    $fields_value[$field_name] = $form_state['values'][$field_name];
  }
	$redirect = 'user/'. $user->uid;
	if (!empty($_GET['destination'])) {
		$redirect = $_GET['destination'];
	}
  $form_state['redirect'] = $redirect;
  // Update the user table timestamp noting user has logged in.
  $user->login = REQUEST_TIME;
  db_update('users')
    ->fields(array('login' => $user->login))
    ->condition('uid', $user->uid)
    ->execute();
  watchdog('pfff', '%name filled missing fields.', array('%name' => $user->name,));
  drupal_session_regenerate();
  user_save($user, $fields_value);
  user_module_invoke('login', $edit, $user);
}

