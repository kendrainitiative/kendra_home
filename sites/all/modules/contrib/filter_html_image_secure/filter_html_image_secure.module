<?php

/**
 * @file
 * Restricts IMG tags in filtered user input to this site.
 */

/**
 * Implements hook_filter_info().
 */
function filter_html_image_secure_filter_info() {
  $filters['filter_html_image_secure'] = array(
    'title' => t('Restrict images to this site'),
    'description' => t('Disallows usage of &lt;img&gt; tag sources that are not hosted on this site by replacing them with a placeholder image.'),
    'process callback' => 'filter_html_image_secure_process',
    'tips callback' => 'filter_html_image_secure_filter_tips',
    // Supposed to run after other filters and before HTML corrector by default.
    'weight' => 9,
  );
  return $filters;
}

/**
 * Filter tips callback for local image filter.
 */
function filter_html_image_secure_filter_tips($filter, $format, $long = FALSE) {
  return t('Only images hosted on this site may be used in &lt;img&gt; tags. Others are replaced with an error icon.');
}

/**
 * Process callback for local image filter.
 */
function filter_html_image_secure_process($text, $format) {
  // Find the path (e.g. '/') to Drupal root.
  $base_path = base_path();
  $base_path_length = drupal_strlen($base_path);

  // Find the directory on the server where index.php resides.
  $local_dir = DRUPAL_ROOT . '/';

  $html_dom = filter_dom_load($text);
  $images = $html_dom->getElementsByTagName('img');
  foreach ($images as $image) {
    $src = $image->getAttribute('src');
    // Store the original src, to be used if the image doesn't validate.
    $orig_src = $src;
    // Remove absolute URLs pointed to the local domain, in order to prevent
    // mixed content errors. Use the configured list of allowed domains, if
    // set.
    if ($domains = variable_get('filter_html_image_secure_domains', NULL)) {
      $url = @parse_url($src);
      // If the URL has a host, check if it is in the list of allowed domains.
      if (isset($url['host']) && isset($url['path']) && in_array($url['host'], $domains, TRUE)) {
        // Only images in the filesystem will pass verification, do not bother
        // with query.
        $image->setAttribute('src', $url['path']);
      }
    }
    else {
      $image->setAttribute('src', preg_replace('|^https?://' . $_SERVER['HTTP_HOST'] . '|', '', $src));
    }

    // Verify $src starts with $base_path. This also ensures that external
    // images can't be referenced because $base_path always starts with a
    // slash. Another insurance against that will be prefixing the image
    // source with the Drupal root before running getimagesize() on it.
    $src = $image->getAttribute('src');
    if (drupal_substr($src, 0, $base_path_length) == $base_path) {
      // Remove the base path() to get the path relative to the Drupal root.
      // Also, make sure we're dealing with a real image here.
      $local_image_path = $local_dir . drupal_substr($src, $base_path_length);
      $local_image_path = rawurldecode($local_image_path);
      if ($info = @getimagesize($local_image_path)) {
        // The image has the right path, nothing to do. Erroneous images
        // are dealt with below.
        continue;
      }
    }
    $image->setAttribute('data-orig-src', $orig_src);
    // Allow modules and themes to replace an invalid image with an error
    // indicator. See filter_html_image_secure_filter_html_image_secure_image_alter().
    drupal_alter('filter_html_image_secure_image', $image);
  }
  $text = filter_dom_serialize($html_dom);

  return $text;
}

/**
 * Implements hook_filter_secure_image_alter().
 *
 * Formats an image DOM element that has an invalid source.
 *
 * @param DOMElement $image
 *   An IMG node to format, parsed from the filtered text.
 *
 * @see _filter_html_image_secure_process()
 */
function filter_html_image_secure_filter_html_image_secure_image_alter(&$image) {
  // Turn an invalid image into an error indicator.
  $image->setAttribute('src', base_path() . 'misc/watchdog-error.png');
  $image->setAttribute('alt', t('Image removed.'));
  $image->setAttribute('title', t('This image has been removed. For security reasons, only images from the local domain are allowed.'));
  $image->setAttribute('height', '18');
  $image->setAttribute('width',  '18');

  // Add a CSS class to aid in styling.
  $class = ($image->getAttribute('class') ? trim($image->getAttribute('class')) . ' ' : '');
  $class .= 'filter-image-invalid';
  $image->setAttribute('class', $class);
}
